#!groovy

@Library('jenkinslib@main') _
def tools = new org.devops.tools()
def build = new org.devops.build()
def gitlab = new org.devops.gitlab()
// def deploy = new org.devops.deploy()

String workspace = '/opt/jenkins/workspace'
String srcUrl ="${env.srcUrl}"
String branchName="${env.branchName}"
String buildTye = "${env.buildType}"
String buildShell = "${env.buildShell}"
String deployHosts = "${env.deployHosts}"

if("${runOpts}" == "GitlabPush"){
                        branchName = brunch - "refs/heads/"
                        
                        currentBuild.description = "Trigger by ${userName} ${brunch}"
                        gitlab.ChangeCommitStatus(projectId,commitSha,"running")
                    }
pipeline {
    agent {
        node {
            label 'build01'
        }
    }
   environment {
        cc = 'clang'
   }
    options {
        timeout(time:1, unit:'HOURS')
    }
    parameters {
        string(name: 'DEPLOY_ENV', defaultValue:'staging', description:'')
    }
    stages {
        stage("CheckOut"){
            steps{
                script{
                    
                    println("${branchName}")
                    tools.PrintMes("CheckOut","green")
                    checkout([$class: 'GitSCM', branches: [[name: "${branchName}"]], doGenerateSubmoduleConfigurations: false, extensions: [], submoduleCfg: [], userRemoteConfigs: [[credentialsId: 'f96ad198-0c58-4f37-af2e-1a1e01fc3c63', url: "${srcUrl}"]]])
                }
            }
        }
        // stage('GetCode') {
        //     when { environment name:'DEPLOY_ENV', value:'staging' }
        //     steps {
        //         timeout(time:5, unit:'MINUTES') {
        //             script {
        //                 //println("${GetCode}")
        //                 tools.PrintMes('获取代码!', 'green')
        //             }
        //         }
        //     }
        // }
        stage('Build') {
            steps {
                script{
                tools.PrintMes("执行打包","green")
                build.Build(buildType,buildShell)
                // deploy.AnsibleDeploy("${deployHosts}","-m ping")
                }
                
            }
        }

        // stage('CodeScan') {
        //     steps {
        //         timeout(time:5, unit:'MINUTES') {
        //             script {
        //                 //println("${CodeScan}")
        //                 tools.PrintMes('代码扫描!', 'green')
        //                 mvnHome = tool 'm2'
        //                 println(mvnHome)
        //                 sh "${mvnHome}/bin/mvn --version"
        //             }
        //         }
        //     }
        // }
        // stage('Declarative') {
        //     steps {
        //         timeout(time:5, unit:'MINUTES') {
        //             script {
        //                 tools.PrintMes('声明发布!', 'green')
        //             }
        //         }
        //     }
        // }
    }
    post{
            always{
                script{
                    println("always")
                }
            }
            success{
                script{
                    println("success")
                    gitlab.ChangeCommitStatus(projectId,commitSha)
                }
            }
            failure{
                script{
                    println("failure")
                }
            }
            aborted{
                script{
                    println("aborted")
                }
            }
        }
}
